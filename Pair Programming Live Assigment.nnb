{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "### Proyecto: **Conversor de Moneda Colaborativo (DOP a USD)**\r\n\r\n### Flujo de Trabajo\r\n\r\nDeben trabajarán en equipo para desarrollar una aplicación sencilla de conversión de divisas (de pesos dominicanos a dólares estadounidenses y viceversa) en una estructura colaborativa usando Git y aplicando las tecnologías MERN.\r\n\r\n### Estructura de Roles Propuesto\r\n\r\n* **Estudiante A**: Responsable de la configuración de la base de datos y el backend y el servicio de administracion de tasas\r\n* **Estudiante B**: Responsable del del formulario de conversión en el frontend, historial de conversiones y de la administración de la tasa de cambio en el frontend.\r\n\r\n* * *\r\n\r\n### 1. **Paso 1: Configuración del Repositorio y Estructura Básica**\r\n\r\n* **Crear un repositorio** en GitHub.\r\n* **Organización de Carpetas**:\r\n    * Crear carpetas iniciales: `/backend` para el servidor y `/frontend` para la aplicación React.\r\n* **División de Roles**:\r\n    * Asegurar que cada estudiante tenga permisos y configure una rama propia (`backend-setup` y `frontend-setup`).\r\n\r\n* * *\r\n\r\n### 2. **Paso 2: Backend (Node.js, Express, MongoDB)**\r\n\r\n#### Parte A: Configuración del Proyecto y Base de Datos\r\n\r\n* **1. Inicializar el Backend**:\r\n    \r\n    * Dentro de `/backend`, ejecutar `npm init -y`.\r\n    * Instalar dependencias: `express`, `mongoose`, `cors`.\r\n* **2. Conexión a MongoDB**:\r\n    \r\n    * Configurar un comando `start` en la parte de `scripts` del archivo `package.json` para colocar las variables de entorno\r\n        - *Setup*\r\n        ```json\r\n            \"scripts\": {\r\n                \"start\": \"set VARIABLE_ENTORNO=Contenido && ts-node ./src/test.ts\"\r\n            },\r\n        ```\r\n        - *Uso*\r\n        ```typescript\r\n            import process from \"process\";\r\n\r\n            const variableDeEnterno = process.env.VARIABLE_ENTORNO;\r\n        ```\r\n    * Conectar MongoDB usando `mongoose.connect` en el archivo principal (`app.js`).\r\n\r\n#### Parte B: Modelos y Endpoints\r\n\r\n* **3. Crear el Modelo `Conversion`**:\r\n    \r\n    * Definir el esquema de `Conversion` con campos como `monto`, `monedaOrigen`, `monedaDestino`, y `resultado`.\r\n* **4. Crear el Modelo `TasaDeCambio`**:\r\n    \r\n    * Definir el esquema de `TasaDeCambio` con `valor` (ejemplo: 1 DOP = 0.018 USD, 1 USD = 59.25 DOP). Considerar que en el futuro puedan agregar nuevas tasas de cambios por cada nueva institución.\r\n\r\n* **5. Definir Endpoints**:\r\n    \r\n    * Endpoint para realizar una conversión y guardar el resultado.\r\n    * Endpoint para obtener y actualizar la tasa de cambio.\r\n\r\n* * *\r\n\r\n### 3. **Paso 3: Frontend usando Material UI (React)**\r\n\r\n#### Parte A: Configuración Inicial del Frontend\r\n\r\n* **1. Crear la Aplicación de React**:\r\n    * En la carpeta `/frontend`, ejecutar `npx create-react-app frontend`.\r\n    * Instalar `@mui/material` y `fetch` o `axios` (o cualquier otro que prefieran) para el manejo de la interfaz y peticiones API.\r\n\r\n#### Parte B: Componentes\r\n\r\n* **2. Componente `ConverterForm`**:\r\n    \r\n    * Crear un formulario simple con:\r\n        * `TextField` para el monto a convertir.\r\n        * `Select` para elegir `DOP` o `USD`.\r\n        * Botón para realizar la conversión.\r\n    * Realizar la solicitud de conversión al backend y mostrar el resultado.\r\n* **3. Componente `ExchangeRateManager`**:\r\n    \r\n    * Formulario para que el administrador actualice la tasa de cambio.\r\n    * Utilizar `TextField` y `Button` para ingresar la nueva tasa y actualizarla en la base de datos.\r\n* **4. Componente `ConversionHistory`**:\r\n    \r\n    * Mostrar un historial de conversiones en formato de `Table` de MUI.\r\n    * Hacer una solicitud al backend para obtener el historial y renderizarlo en una tabla con `fecha`, `monto`, `monedaOrigen`, `monedaDestino` y `resultado`.\r\n\r\n* * *\r\n\r\n### 4. **Paso 4: Sincronización y Resolución de Conflictos en Git**\r\n\r\n* Cada estudiante debe:\r\n    * Trabajar en sus ramas (`backend-setup` y `frontend-setup`) para sus partes.\r\n    * Hacer `pull` y `merge` regularmente para actualizar sus ramas y resolver cualquier conflicto.\r\n* **Resolución de Conflictos**:\r\n    * Documentar los pasos y acuerdos en el README o en una sección de documentación sobre la resolución de conflictos.\r\n\r\n* * *\r\n\r\n### 5. **Resumen de Criterios de Evaluación**\r\n\r\n1. **Implementación de MUI (25%)**:\r\n    \r\n    * Uso de `TextField`, `Select`, `Table` (opcional), y personalización de estilos.\r\n2. **Funcionalidad Completa (30%)**:\r\n    \r\n    * CRUD de tasa de cambio y almacenamiento de conversiones.\r\n    * Historial completo y funcionamiento del conversor.\r\n3. **Calidad del Código (15%)**:\r\n    \r\n    * Organización, modularidad, y comentarios útiles.\r\n4. **Manejo de Git (15%)**:\r\n    \r\n    * Flujo claro de ramas y documentación de conflictos.\r\n5. **Trabajo en Equipo y Documentación (15%)**:\r\n    \r\n    * Buena colaboración, con roles claros y documentación en el repositorio.\r\n\r\n6. **Bonus (5%)**:    \r\n\r\n    * Permitir la conversion tanto de dólares a pesos como de pesos a dólares\r\n\r\n* * *"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}